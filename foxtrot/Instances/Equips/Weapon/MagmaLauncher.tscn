[gd_scene load_steps=16 format=2]

[ext_resource path="res://Instances/Equips/Weapon/projectile_stack.gd" type="Script" id=2]
[ext_resource path="res://Textures/Gameplay/Weapon/magma_launcher_sheet.png" type="Texture" id=3]
[ext_resource path="res://Textures/Gameplay/Weapon/magma_launcher.png" type="Texture" id=4]
[ext_resource path="res://Textures/Gameplay/Weapon/magma_launcher_atlas.tres" type="Texture" id=8]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 14.5714, 2.42868 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;		//Flip coloring 90 degrees.

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;	//Use the outline_uv for coloring or not. Recomended not, but sometimes might be good.

uniform bool useTexture;		//Use a texture for the coloring
uniform sampler2D outlineTexture;	//This is the texture that will be used for coloring. Recomended to use a gradient texture, but I guess anything else works.

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				vec2 final_uv = use_outline_uv ? outline_uv : UV;	//get the UV we will be using, controlled via use_outline_uv
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a){
					if(!useTexture)	//If we're not using a texture
					{
						final_color = mix(outline_color, outline_color_2, flipColors ? final_uv.y : final_uv.x);
					}
					else
					{
						vec2 uv = flipColors ? vec2(final_uv.y, final_uv.x) : final_uv;
						vec4 outline = texture(outlineTexture, uv);
						
						final_color = outline;
					}
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 5 )
shader_param/intensity = 50
shader_param/precision = 0.02
shader_param/flipColors = true
shader_param/outline_color = Color( 0.541176, 0.698039, 0.819608, 1 )
shader_param/outline_color_2 = Color( 0.0509804, 0.447059, 0.764706, 1 )
shader_param/use_outline_uv = true
shader_param/useTexture = false

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 3 )
region = Rect2( 0, 0, 22, 13 )

[sub_resource type="Animation" id=3]
tracks/0/type = "value"
tracks/0/path = NodePath(".:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ SubResource( 2 ) ]
}

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 3 )
region = Rect2( 44, 0, 22, 13 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 3 )
region = Rect2( 66, 0, 22, 13 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 3 )
region = Rect2( 88, 0, 22, 13 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 3 )
region = Rect2( 110, 0, 22, 13 )

[sub_resource type="Animation" id=8]
length = 0.5
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ ExtResource( 8 ), SubResource( 4 ), SubResource( 11 ), SubResource( 6 ), ExtResource( 8 ), SubResource( 7 ) ]
}
tracks/1/type = "method"
tracks/1/path = NodePath("..")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"values": [ {
"args": [  ],
"method": "Use"
}, {
"args": [  ],
"method": "ResetCooldown"
} ]
}

[sub_resource type="CircleShape2D" id=9]
radius = 14.3362

[node name="HarpoonGun" type="KinematicBody2D"]
collision_layer = 0
collision_mask = 129
script = ExtResource( 2 )
__meta__ = {
"_edit_lock_": true
}
id = 3
max_stack_amt = 1
isInfiniteUse = true
is_automatic = true
projectile = "res://Instances/Equips/Projectile/MagmaProjectile.tscn"

[node name="Collider" type="CollisionShape2D" parent="."]
position = Vector2( 7.04372, -2.03773 )
shape = SubResource( 1 )

[node name="Sprite2" type="Sprite" parent="."]
visible = false
material = SubResource( 12 )
position = Vector2( 8.09375, -0.0625 )
scale = Vector2( 2, 2 )
texture = ExtResource( 4 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( -8, 0 )
scale = Vector2( 2, 2 )
texture = SubResource( 2 )
offset = Vector2( 8, 0 )
__meta__ = {
"_edit_lock_": true
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite"]
anims/idle = SubResource( 3 )
anims/reload = SubResource( 8 )

[node name="ProjectileSpawnpoint" type="Node2D" parent="Sprite"]
position = Vector2( 16.886, -3.14411 )

[node name="PickupDetector" type="Area2D" parent="."]
position = Vector2( -8, 0 )
collision_layer = 8
collision_mask = 2
__meta__ = {
"_edit_lock_": true
}

[node name="PickupCollider" type="CollisionShape2D" parent="PickupDetector"]
position = Vector2( 8, 0 )
shape = SubResource( 9 )
__meta__ = {
"_edit_lock_": true
}

[connection signal="body_entered" from="PickupDetector" to="." method="_on_PickupDetector_body_entered"]
[connection signal="body_exited" from="PickupDetector" to="." method="_on_PickupDetector_body_exited"]
