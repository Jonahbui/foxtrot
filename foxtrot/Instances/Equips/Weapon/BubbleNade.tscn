[gd_scene load_steps=7 format=2]

[ext_resource path="res://Textures/Gameplay/Weapon/bubble_nade.png" type="Texture" id=1]
[ext_resource path="res://Instances/Equips/Weapon/projectile_stack.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;		//Flip coloring 90 degrees.

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;	//Use the outline_uv for coloring or not. Recomended not, but sometimes might be good.

uniform bool useTexture;		//Use a texture for the coloring
uniform sampler2D outlineTexture;	//This is the texture that will be used for coloring. Recomended to use a gradient texture, but I guess anything else works.

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				vec2 final_uv = use_outline_uv ? outline_uv : UV;	//get the UV we will be using, controlled via use_outline_uv
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a){
					if(!useTexture)	//If we're not using a texture
					{
						final_color = mix(outline_color, outline_color_2, flipColors ? final_uv.y : final_uv.x);
					}
					else
					{
						vec2 uv = flipColors ? vec2(final_uv.y, final_uv.x) : final_uv;
						vec4 outline = texture(outlineTexture, uv);
						
						final_color = outline;
					}
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/intensity = 50
shader_param/precision = 0.02
shader_param/flipColors = true
shader_param/outline_color = Color( 0.541176, 0.698039, 0.819608, 1 )
shader_param/outline_color_2 = Color( 0.0509804, 0.447059, 0.764706, 1 )
shader_param/use_outline_uv = true
shader_param/useTexture = false

[sub_resource type="CircleShape2D" id=3]
radius = 11.3137

[sub_resource type="CircleShape2D" id=4]
radius = 14.3362

[node name="BubbleNade" type="KinematicBody2D"]
z_index = 4
collision_layer = 0
collision_mask = 129
script = ExtResource( 2 )
id = 0
max_stack_amt = 8
damage = 10
projectile_sound = "res://Audio/SoundEffects/whoosh.wav"
projectile = "res://Instances/Equips/Projectile/BubblenadeProjectile.tscn"

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
scale = Vector2( 1.5, 1.5 )
texture = ExtResource( 1 )

[node name="ProjectileSpawnpoint" type="Node2D" parent="Sprite"]
scale = Vector2( 0.666667, 0.666667 )
__meta__ = {
"_edit_lock_": true
}

[node name="Collider" type="CollisionShape2D" parent="."]
position = Vector2( -0.771694, 1.68369 )
shape = SubResource( 3 )
__meta__ = {
"_edit_lock_": true
}

[node name="PickupDetector" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2
__meta__ = {
"_edit_lock_": true
}

[node name="PickupCollider" type="CollisionShape2D" parent="PickupDetector"]
position = Vector2( -0.708706, 1.73239 )
shape = SubResource( 4 )
__meta__ = {
"_edit_lock_": true
}

[connection signal="body_entered" from="PickupDetector" to="." method="_on_PickupDetector_body_entered"]
[connection signal="body_exited" from="PickupDetector" to="." method="_on_PickupDetector_body_exited"]
